@page "/home"
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@using MudBlazor
@inject ISnackbar Snackbar

@inject HttpClient Http
<PageTitle>Home</PageTitle>

    <style>
        .card-img-top {
            width: 100%;
            height: 200px;
            object-fit: auto;
        }

        .card-body {
            display: flex;
            flex-direction: column;
            align-items : center;
        }
    </style>
<div class="container mt-5">
    <div class="row">
        @if (products == null)
        {
            <p>Loading...</p>
        }
        else
        {
            @foreach (var product in products)
            {
                <div class="col-md-3 mb-4">
                    <div class="card">
                        <img src="@product.Img" class="card-img-top" alt="Product Image">
                        <div class="card-body">
                            <h5 class="card-title">@product.ProductName</h5>
                            <p class="card-text">@product.Description</p>
                            <button class="btn btn-primary" @onclick="() => IncrementCount(product.OrderId)">Mua Ngay</button>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

@code {
    int currentCount = 0;
    private List<Product> products;


    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task IncrementCount(int OrderId)
    {
        try
        {
            var dateNow = DateTime.Now;
            var requestData = new
            {
                OrderId = OrderId,
                DateBuy = dateNow
            };

            var response = await Http.PostAsJsonAsync("https://localhost:7054/api/Order/addToCart", requestData);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Thêm vào gỏ hàng thành công!", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Thêm vào giỏ hàng thất bại: {response.ReasonPhrase}", Severity.Error);
            }
            response.EnsureSuccessStatusCode();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error ordering product: {ex.Message}");
        }
    }

    private async Task LoadProducts()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ProductResponse>("https://localhost:7054/api/Order/GetListProduct?isBuy=false");
            if (response != null && response.State)
            {
                products = response.Data;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching products: {ex.Message}");
        }
    }
    public class Product
    {
        public int OrderId { get; set; }
        public decimal Price { get; set; }
        public string ProductName { get; set; }
        public string Description { get; set; }
        public string Img { get; set; }
        public int amount { get; set;  }
    }
    public class ProductResponse
    {
        public bool State { get; set; }
        public string Message { get; set; }
        public object Paginator { get; set; }
        public List<Product> Data { get; set; }
        public bool Success { get; set; }
        public object Code { get; set; }
    }
    private class ApiResponse
    {
        public bool State { get; set; }
        public string Message { get; set; }
        public object Paginator { get; set; }
        public int Data { get; set; }
        public bool Success { get; set; }
        public object Code { get; set; }
    }
}
