@page "/counter"
@rendermode InteractiveServer

@inject HttpClient Http

<PageTitle>Counter</PageTitle>

<h1>GIỎ HÀNG</h1>

<style>
    .card-img-top {
        width: 100%;
        height: 200px;
        object-fit: auto;
    }

    .card-body {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
</style>
<div class="container mt-5">
    <div class="row">
        @if (products == null)
        {
            <p>Loading...</p>
        }
        else
        {
            @foreach (var product in products)
            {
                <div class="col-md-3 mb-4">
                    <div class="card">
                        <img src="@product.Img" class="card-img-top" alt="Product Image">
                        <div class="card-body">
                            <h5 class="card-title">@product.ProductName</h5>
                            <p class="card-text">@product.Description</p>
                            <p class="card-text">Số lượng đặt: @product.amount</p>
                            <button class="btn btn-primary" @onclick="() => IncrementCount(product.OrderId,product.Price,product.ProductName)">Thanh Toán</button>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    int currentCount = 0;
    private List<Product> products;
    protected override async Task OnInitializedAsync()
    {
        await LoadOrderCountAsync();
        await LoadProducts();
    }

    private async Task LoadOrderCountAsync()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ApiResponse>("https://localhost:7054/api/Order/GetCountOrder");
            if (response != null && response.State)
            {
                currentCount = response.Data;
            }
        }
        catch (Exception ex)
        {
            // Handle exception
            Console.WriteLine($"Error fetching order count: {ex.Message}");
        }
    }

    private async Task IncrementCount(int ID, decimal Price,string productName)
    {
        try
        {
            var requestData = new
            {
                item = productName,
                quantity = 1,
                amount = Price,
                paymentMethod = "CreditCard",
                OrderId = ID,
                address = "HaiBATRUNg"
            };
            var response = await Http.PostAsJsonAsync("https://localhost:7054/api/Order/CreateOrder", requestData);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error ordering product: {ex.Message}");
        }    
    }
    private async Task LoadProducts()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ProductResponse>("https://localhost:7054/api/Order/GetListProduct?isBuy=true");
            if (response != null && response.State)
            {
                products = response.Data;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching products: {ex.Message}");
        }
    }
    public class Product
    {
        public int OrderId { get; set; }
        public decimal Price { get; set; }
        public string ProductName { get; set; }
        public string Description { get; set; }
        public string Img { get; set; }
        public int amount { get; set; }
    }
    public class ProductResponse
    {
        public bool State { get; set; }
        public string Message { get; set; }
        public object Paginator { get; set; }
        public List<Product> Data { get; set; }
        public bool Success { get; set; }
        public object Code { get; set; }
    }
    private class ApiResponse
    {
        public bool State { get; set; }
        public string Message { get; set; }
        public object Paginator { get; set; }
        public int Data { get; set; }
        public bool Success { get; set; }
        public object Code { get; set; }
    }
}
