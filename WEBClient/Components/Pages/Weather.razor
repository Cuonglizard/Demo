@page "/weather"
@attribute [StreamRendering]
@using MudBlazor
@inject ISnackbar Snackbar

@inject HttpClient Http
<PageTitle>Weather</PageTitle>

<h1>Đơn hàng đã mua</h1>

<p>This component demonstrates showing data.</p>

@if (data == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Đơn hàng</th>
                <th>Mã đơn hàng </th>
                <th>Giá</th>
                <th>Ngày mua</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in data)
            {
                <tr>
                    <td>@forecast.ProductName</td>
                    <td>@forecast.OrderId</td>
                    <td>@forecast.Amount</td>
                    <td>@forecast.DatePayment</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ListPayment> data;
    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }
    private async Task LoadProducts()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ProductResponse>("https://localhost:7054/api/Order/GetListPayment");
            if (response != null && response.State)
            {
                data = response.Data;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching products: {ex.Message}");
        }
    }

    public class ProductResponse
    {
        public bool State { get; set; }
        public string Message { get; set; }
        public object Paginator { get; set; }
        public List<ListPayment> Data { get; set; }
        public bool Success { get; set; }
        public object Code { get; set; }
    }
    public class ListPayment
    {
        public string OrderId { get; set; }
        public decimal Amount { get; set; }
        public DateTime? DatePayment { get; set; }
        public string ProductName { get; set; }
    }
}
